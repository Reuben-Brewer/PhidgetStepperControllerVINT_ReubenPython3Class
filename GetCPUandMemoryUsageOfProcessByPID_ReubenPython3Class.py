# -*- coding: utf-8 -*-

'''
Reuben Brewer, Ph.D.
reuben.brewer@gmail.com
www.reubotics.com

Apache 2 License
Software Revision A, 07/15/2025

Verified working on: Python 3.11/12 for Windows 10/11 64-bit.

NOTE:
    The result is:
    CPU usage as a percentage of one full logical core per 100%
    So if you have a 4-core CPU with hyperthreading (i.e. 8 logical processors):
    If your process uses 100% of 1 core, cpu_percent() will return ~12.5% (100 รท 8).
    If your process is multi-threaded and fully uses 2 cores, it would show ~25%.
    100% means it is using all available logical CPUs fully.
'''

__author__ = 'reuben.brewer'

######################################################################################################
######################################################################################################
import os
import sys
import time
import threading
from copy import * #for deepcopy(dict)
import traceback

import psutil
######################################################################################################
######################################################################################################

######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
class GetCPUandMemoryUsageOfProcessByPID_ReubenPython3Class():

    ######################################################################################################
    ######################################################################################################
    ######################################################################################################
    def __init__(self, SetupDict):

        ##########################################################################################################
        ##########################################################################################################
        self.SetupDict = SetupDict

        self.EXIT_PROGRAM_FLAG = 0
        self.OBJECT_CREATED_SUCCESSFULLY_FLAG = 0
        self.MainThread_StillRunningFlag = 0

        self.CurrentTime_CalculatedFromMainThread = 0.0
        self.StartingTime_CalculatedFromMainThread = 0.0

        self.MemoryUsageOfProcessByPID_Dict = dict([("CPUusage_Percent", -1),
                                                    ("MemoryUsage_Percent", -1),
                                                    ("MemoryUsage_MB", -1)])

        self.MostRecentDataDict = dict([("MemoryUsageOfProcessByPID_Dict", self.MemoryUsageOfProcessByPID_Dict), ("Time", 0.0)])
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        if "Process_PID_Integer" in self.SetupDict:

            try:
                self.Process_PID_Integer = int(self.SetupDict["Process_PID_Integer"])

            except:
                exceptions = sys.exc_info()[0]
                print("GetCPUandMemoryUsageOfProcessByPID_ReubenPython3ClassObject __init__: Process_PID_Integer must be an integer.")
                traceback.print_exc()

        else:
            print("GetCPUandMemoryUsageOfProcessByPID_ReubenPython3Class __init__: Must pass in Process_PID_Integer as part of SetupDict.")
            return
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        if "MainThread_TimeToSleepEachLoop" in self.SetupDict:
            self.MainThread_TimeToSleepEachLoop = self.PassThroughFloatValuesInRange_ExitProgramOtherwise("MainThread_TimeToSleepEachLoop", self.SetupDict["MainThread_TimeToSleepEachLoop"], 0.001, 100000)

        else:
            self.MainThread_TimeToSleepEachLoop = 0.5

        print("GetCPUandMemoryUsageOfProcessByPID_ReubenPython3Class __init__: MainThread_TimeToSleepEachLoop: " + str(self.MainThread_TimeToSleepEachLoop))
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        if "UsageSamplingTime" in self.SetupDict:
            self.UsageSamplingTime = self.PassThroughFloatValuesInRange_ExitProgramOtherwise("UsageSamplingTime", self.SetupDict["UsageSamplingTime"], 0.000, 100000)

        else:
            self.UsageSamplingTime = 0.5

        print("GetCPUandMemoryUsageOfProcessByPID_ReubenPython3Class __init__: UsageSamplingTime: " + str(self.UsageSamplingTime))
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################

        #########################################################
        try:
            self.ProcessObject = psutil.Process(self.Process_PID_Integer)
            self.ProcessObject.cpu_percent(interval=None)  # Warm-up
        #########################################################

        #########################################################
        except psutil.NoSuchProcess:
            print("GetCPUandMemoryUsageOfProcessByPID: PID " + str(self.Process_PID_Integer) + " does not exist.")
            # traceback.print_exc()
            return
        #########################################################

        ##########################################################################################################
        ##########################################################################################################

        #########################################################
        #########################################################
        self.Main_ThreadingObject = threading.Thread(target=self.MainThread, args=())
        self.Main_ThreadingObject.start()
        #########################################################
        #########################################################

        ##########################################################################################################
        ##########################################################################################################
        self.OBJECT_CREATED_SUCCESSFULLY_FLAG = 1
        ##########################################################################################################
        ##########################################################################################################

    ######################################################################################################
    ######################################################################################################
    ######################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    def BurnCPU_FloatingMath(self, TimeDuration = 0.5):

        StartTime = time.time()

        while time.time() - StartTime < TimeDuration:
            sum(x ** 0.5 for x in range(1, 1000000))

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################
    @staticmethod
    def GetCPUandMemoryUsageOfProcessByPID(ProcessObject, UsageSamplingTime, PrintInfoForDebuggingFlag=0):

        ##########################################################################################################
        ##########################################################################################################
        try:

            CPUusage_Percent = ProcessObject.cpu_percent(interval=UsageSamplingTime)  # Use a short interval, 0.0 for non-blocking

            MemoryInfo = ProcessObject.memory_info()
            MemoryUsage_MB = MemoryInfo.rss / (1024 * 1024)  # Convert to MB

            MemoryUsage_Percent = ProcessObject.memory_percent()

            DictToReturn = dict([("CPUusage_Percent", round(CPUusage_Percent, 5)),
                                ("MemoryUsage_Percent", round(MemoryUsage_Percent, 5)),
                                ("MemoryUsage_MB", round(MemoryUsage_MB, 5))])

            ##########################################################################################################
            if PrintInfoForDebuggingFlag == 1:
                print("GetCPUandMemoryUsageOfProcessByPID: For Process_PID_Integer = " + str(Process_PID_Integer) + "DictToReturn = " + str(DictToReturn))
            ##########################################################################################################

            return DictToReturn
        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        except psutil.NoSuchProcess:
            print("GetCPUandMemoryUsageOfProcessByPID: PID " + str(Process_PID_Integer) + " does not exist.")
            # traceback.print_exc()
            return dict()

        ##########################################################################################################
        ##########################################################################################################

        ##########################################################################################################
        ##########################################################################################################
        except:
            exceptions = sys.exc_info()[0]
            print("GetCPUandMemoryUsageOfProcessByPID, exceptions: %s" % exceptions)
            #traceback.print_exc()
            return dict()

        ##########################################################################################################
        ##########################################################################################################

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    ######################################################################################################
    ######################################################################################################
    ######################################################################################################
    def MainThread(self):

        print("GetCPUandMemoryUsageOfProcessByPID_ReubenPython3Class: Started MainThread.")
        self.MainThread_StillRunningFlag = 1

        self.StartingTime_CalculatedFromMainThread = time.time()

        ######################################################################################################
        ######################################################################################################
        while self.EXIT_PROGRAM_FLAG == 0:

            ######################################################################################################
            self.CurrentTime_CalculatedFromMainThread = time.time() - self.StartingTime_CalculatedFromMainThread
            ######################################################################################################

            ######################################################################################################
            try:
                self.MemoryUsageOfProcessByPID_Dict = GetCPUandMemoryUsageOfProcessByPID_ReubenPython3Class.GetCPUandMemoryUsageOfProcessByPID(self.ProcessObject, self.UsageSamplingTime)

                self.MostRecentDataDict["MemoryUsageOfProcessByPID_Dict"] = self.MemoryUsageOfProcessByPID_Dict
                self.MostRecentDataDict["Time"] = self.CurrentTime_CalculatedFromMainThread
                
                time.sleep(self.MainThread_TimeToSleepEachLoop)
                #self.BurnCPU_FloatingMath(0.5)
            ######################################################################################################

            ######################################################################################################
            except:
                exceptions = sys.exc_info()[0]
                print("MainThread, Exceptions: %s" % exceptions)
                #traceback.print_exc()
            ######################################################################################################

        ######################################################################################################
        ######################################################################################################

        print("GetCPUandMemoryUsageOfProcessByPID_ReubenPython3Class: Finished MainThread.")
        self.MainThread_StillRunningFlag = 0

    ######################################################################################################
    ######################################################################################################

    ######################################################################################################
    ######################################################################################################
    ######################################################################################################
    def GetMostRecentDataDict(self):

        if self.EXIT_PROGRAM_FLAG == 0:

            return deepcopy(self.MostRecentDataDict)  # deepcopy IS required as MostRecentDataDict contains dicts.

        else:
            return dict()  # So that we're not returning variables during the close-down process.

    ######################################################################################################
    ######################################################################################################
    ######################################################################################################

    ######################################################################################################
    ######################################################################################################
    ######################################################################################################
    def ExitProgram_Callback(self):

        print("GetCPUandMemoryUsageOfProcessByPID_ReubenPython3Class: Exiting all threads.")

        self.EXIT_PROGRAM_FLAG = 1
    ######################################################################################################
    ######################################################################################################
    ######################################################################################################

######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################